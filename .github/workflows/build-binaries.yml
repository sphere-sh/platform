name: Build binaries

on:
  push:
    branches: [ "master" ]
    paths:
      - 'cmd/universe/**'
      - 'data-ingestion/**'
      - 'data-storage/**'
      - 'data-management/**'

jobs:
  build_universe_binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Install dependencies
        working-directory: cmd/universe
        run: go mod download
      - name: Build universe
        working-directory: cmd/universe/cmd/daemon
        run: go build -o sphere-universe ./main.go
      - name: Upload universe binaries artifacts
        uses: actions/upload-artifact@v4
        with:
          name: universe-binaries
          path: |
            cmd/universe/cmd/daemon/sphere-universe

  build_ingestion_binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Install dependencies
        working-directory: data-ingestion/cmd/server
        run: go mod download
      - name: Build ingestion
        working-directory: data-ingestion/cmd/server
        run: go build -o sphere-ingestion ./main.go
      - name: Upload ingestion binaries artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-binaries
          path: |
            data-ingestion/cmd/server/sphere-ingestion

  build_storage_binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Install dependencies
        working-directory: data-storage/cmd/server
        run: go mod download
      - name: Build storage
        working-directory: data-storage/cmd/server
        run: go build -o sphere-storage ./main.go
      - name: Upload ingestion binaries artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storage-binaries
          path: |
            data-storage/cmd/server/sphere-storage

  build_management_binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Install dependencies
        working-directory: data-management/cmd/server
        run: go mod download
      - name: Build management
        working-directory: data-management/cmd/server
        run: go build -o sphere-management ./main.go
      - name: Upload ingestion binaries artifacts
        uses: actions/upload-artifact@v4
        with:
          name: management-binaries
          path: |
            data-management/cmd/server/sphere-management

  # Create a release with the archive
  #
  create_release:
    runs-on: ubuntu-latest
    needs:
      - build_universe_binaries
      - build_ingestion_binaries
      - build_storage_binaries
      - build_management_binaries
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-binaries'
          merge-multiple: true
          path: dist/
      - name: Determine semver update type (major, minor, patch)
        id: determine_update_type
        run: |
          # Get git commits until last tag
          git fetch --tags
          commits=$(git rev-list --count HEAD ^$(git describe --tags `git rev-list --tags --max-count=1`))
          
          # Search commits for keywords [MAJOR], [MINOR], [PATCH]
          major=$(git log --grep="\[MAJOR\]" --oneline | wc -l)
          if [[ $major -gt 0 ]]; then
              echo "MAJOR"
              echo "update_type=MAJOR" >> $GITHUB_ENV
              exit 0
          fi
          
          minor=$(git log --grep="\[MINOR\]" --oneline | wc -l)
          if [[ $minor -gt 0 ]]; then
              echo "MINOR"
              echo "update_type=MINOR" >> $GITHUB_ENV
              exit 0
          fi
          
          # Default to patch if no keywords found
          echo "PATCH"
          echo "update_type=PATCH" >> $GITHUB_ENV
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - name: Generate new tag (semver)
        id: generate_new_tag
        run: |
            # Get the latest tag
            #
            latest_tag=${{ env.latest_tag }}
            if [[ "$latest_tag" == "latest" || -z "$latest_tag" ]]; then
                latest_tag="0.0.0"
            fi
          
            # Get the update type
            #
            update_type=${{ env.update_type }}
          
            # Increment the version based on the update type
            #
            if [[ "$update_type" == "MAJOR" ]]; then
                IFS='.' read -r major minor patch <<< "${latest_tag#v}"
                new_major=$((major + 1))
                new_tag="v$new_major.0.0"
            elif [[ "$update_type" == "MINOR" ]]; then
                IFS='.' read -r major minor patch <<< "${latest_tag#v}"
                new_minor=$((minor + 1))
                new_tag="v$major.$new_minor.0"
            elif [[ "$update_type" == "PATCH" ]]; then
                IFS='.' read -r major minor patch <<< "${latest_tag#v}"
                new_patch=$((patch + 1))
                new_tag="v$major.$minor.$new_patch"
            else
                echo "Unknown update type: $update_type"
                exit 1
            fi
          
            echo "new_tag=$new_tag" >> $GITHUB_ENV
      - name: print tag
        run: |
          echo "New tag: ${{ env.new_tag }}"
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: "New release of Sphere binaries"
          tag_name: ${{ env.new_tag }}
          files: |
                dist/sphere-ingestion
                dist/sphere-storage
                dist/sphere-management
                dist/sphere-universe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
